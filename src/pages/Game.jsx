// src/pages/Game.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  initializeStory,
  makeChoice,
  determineEnding,
  prepareHumorMode,
  prepareAdaptiveStory
} from '../services/storyService';
import { 
  initializeGameData, 
  unlockAchievement, 
  loadUnlockedAchievements,
  saveGameProgress,
  loadGameProgress,
  clearSavedGame
} from '../services/gameService';
import PlayerStats from '../components/PlayerStats';
import StoryDisplay from '../components/StoryDisplay';
import ChoiceButtons from '../components/ChoiceButtons';
import AchievementNotification from '../components/AchievementNotification';

const Game = () => {
  const navigate = useNavigate();
  const [storyData, setStoryData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({ xp: 0, items: [] });
  const [error, setError] = useState(null);
  const [unlockedAchievements, setUnlockedAchievements] = useState([]);
  const [newlyUnlockedAchievement, setNewlyUnlockedAchievement] = useState(null);

  const playerName = localStorage.getItem('thaiGame_playerName') || '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
  const humorMode = localStorage.getItem('thaiGame_humorMode') === 'true';
  const adaptiveStory = localStorage.getItem('thaiGame_adaptiveStory') === 'true';

  useEffect(() => {
    const startGame = async () => {
      try {
        setError(null);
        
        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö Setting
        prepareHumorMode(humorMode);
        prepareAdaptiveStory(adaptiveStory, stats);
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏° (‡πÄ‡∏ä‡πà‡∏ô Achievements ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß)
        const gameData = initializeGameData();
        setUnlockedAchievements(gameData.unlockedAchievements);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const savedGameState = loadGameProgress();
        if (savedGameState) {
          // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
          setStoryData(savedGameState.storyData);
          setStats(savedGameState.stats);
          console.log('[Game] Loaded saved game state.');
        } else {
          // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
          const initialStory = await initializeStory(playerName);
          setStoryData(initialStory);
          // Unlock achievement ‡πÅ‡∏£‡∏Å
          const firstAchievement = unlockAchievement('first_steps', unlockedAchievements, setUnlockedAchievements);
          if (firstAchievement) {
            setNewlyUnlockedAchievement(firstAchievement);
          }
        }
      } catch (err) {
        console.error('Failed to start game:', err);
        setError(err.message || 'Failed to start the game.');
      } finally {
        setLoading(false);
      }
    };
    startGame();
  }, [playerName]);

  const handleChoice = async (choiceId) => {
    if (!storyData || storyData.gameEnded) return;

    if (choiceId === 'go_home') {
      navigate('/');
      return;
    }

    if (choiceId === 'try_again' || choiceId === 'continue_anyway') {
      setLoading(true);
      setError(null);
      try {
        setStats({ xp: 0, items: [] });
        setUnlockedAchievements(loadUnlockedAchievements()); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï achievements
        clearSavedGame(); // ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        const initialStory = await initializeStory(playerName);
        setStoryData(initialStory);
        // Unlock achievement ‡πÅ‡∏£‡∏Å
        const firstAchievement = unlockAchievement('first_steps', loadUnlockedAchievements(), setUnlockedAchievements);
        if (firstAchievement) {
            setNewlyUnlockedAchievement(firstAchievement);
        }
      } catch (err) {
        setError(err.message || 'Failed to restart the game.');
      } finally {
        setLoading(false);
      }
      return;
    }

    setLoading(true);
    setError(null);
    setNewlyUnlockedAchievement(null); // ‡∏•‡πâ‡∏≤‡∏á notification ‡πÄ‡∏Å‡πà‡∏≤
    try {
      const result = await makeChoice(choiceId, storyData.context, stats);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stats
      let updatedStats = stats;
      if (result.stats) {
        updatedStats = {
          xp: stats.xp + (result.stats.xp || 0),
          items: [...stats.items, ...(result.stats.items || [])]
        };
        setStats(updatedStats);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ Achievements ‡πÉ‡∏´‡∏°‡πà
        checkAndUnlockAchievements(updatedStats, choiceId, result);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (result.gameEnded) {
        const endingDetails = determineEnding(result.endingKey);
        setStoryData({
          text: result.story.text,
          choices: [],
          gameEnded: true,
          ending: endingDetails
        });
      } else if (result.requirementNotMet) {
        setStoryData({
          text: result.story.text,
          choices: result.story.choices,
          context: result.story.context,
          requirementNotMet: true
        });
      } else {
        setStoryData(result.story);
      }
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
      saveGameProgress({
        storyData: result.story,
        stats: updatedStats,
        unlockedAchievements: unlockedAchievements // ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å state ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      });

    } catch (err) {
      console.error('Failed to make choice:', err);
      setError(err.message || 'An error occurred while processing your choice.');
      setStoryData({
        text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á... ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ",
        choices: [
          { id: 'continue_anyway', text: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠" },
          { id: 'go_home', text: "‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å" }
        ],
        context: storyData.context
      });
    } finally {
      setLoading(false);
    }
  };

  const checkAndUnlockAchievements = (currentStats, choiceId, result) => {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ "helping_hand" ‡∏ñ‡πâ‡∏≤ XP > 10
    if (currentStats.xp > 10 && !unlockedAchievements.includes('helping_hand')) {
      const achievement = unlockAchievement('helping_hand', unlockedAchievements, setUnlockedAchievements);
      if (achievement) {
        setNewlyUnlockedAchievement(achievement);
      }
    }
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ "knowledge_seeker" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ" > 1
    const knowledgeItems = currentStats.items.filter(item => item.includes('‡∏£‡∏π‡πâ')).length;
    if (knowledgeItems > 1 && !unlockedAchievements.includes('knowledge_seeker')) {
      const achievement = unlockAchievement('knowledge_seeker', unlockedAchievements, setUnlockedAchievements);
      if (achievement) {
        setNewlyUnlockedAchievement(achievement);
      }
    }
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ "fun_lover" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° "‡∏™‡∏ô‡∏∏‡∏Å" > 1
    const funItems = currentStats.items.filter(item => item.includes('‡∏™‡∏ô‡∏∏‡∏Å')).length;
    if (funItems > 1 && !unlockedAchievements.includes('fun_lover')) {
      const achievement = unlockAchievement('fun_lover', unlockedAchievements, setUnlockedAchievements);
      if (achievement) {
        setNewlyUnlockedAchievement(achievement);
      }
    }
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ "collector" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î > 5
    if (currentStats.items.length > 5 && !unlockedAchievements.includes('collector')) {
      const achievement = unlockAchievement('collector', unlockedAchievements, setUnlockedAchievements);
      if (achievement) {
        setNewlyUnlockedAchievement(achievement);
      }
    }
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ "mini_game_master" ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô mini-game
    if (result.story.context?.miniGameType && !unlockedAchievements.includes('mini_game_master')) {
      const achievement = unlockAchievement('mini_game_master', unlockedAchievements, setUnlockedAchievements);
      if (achievement) {
        setNewlyUnlockedAchievement(achievement);
      }
    }
  };

  const handleRestart = () => {
    navigate('/');
  };

  const closeAchievementNotification = () => {
    setNewlyUnlockedAchievement(null);
  };

  if (loading && !storyData) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <div className="text-4xl mb-4">üîÑ</div>
        <h2 className="text-2xl font-bold text-gray-800">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á...</h2>
        <p className="text-gray-600 mt-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì</p>
      </div>
    );
  }

  if (!storyData) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <h2 className="text-2xl font-bold text-red-600">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ</h2>
        {error && <p className="text-red-500 mt-2">{error}</p>}
        <button
          onClick={() => navigate('/')}
          className="mt-4 bg-amber-600 text-white py-2 px-4 rounded-lg hover:bg-amber-700 transition-colors"
        >
          ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        </button>
      </div>
    );
  }

  if (storyData.gameEnded && storyData.ending) {
    return (
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <h1 className="text-3xl font-bold text-gray-800 mb-6">‡πÄ‡∏Å‡∏°‡∏à‡∏ö!</h1>
          <h2 className="text-2xl font-bold text-amber-700 mb-4">{storyData.ending.title}</h2>
          <div className={`p-6 rounded-lg mb-6 ${
            storyData.ending.type === 'good' ? 'bg-green-100 text-green-800' :
            storyData.ending.type === 'bad' ? 'bg-red-100 text-red-800' :
            'bg-blue-100 text-blue-800'
          }`}>
            <p className="text-lg">{storyData.ending.text}</p>
          </div>
          <div className="bg-amber-50 rounded-lg p-4 mb-6 text-left">
            <h3 className="font-bold text-amber-800 mb-2">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</h3>
            <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå: {stats.xp}</p>
            <p>‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {stats.items.length > 0 ? stats.items.join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}</p>
            <p>Achievements ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ: {unlockedAchievements.length}</p>
          </div>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <button
              onClick={handleRestart}
              className="bg-green-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-green-700 transition-colors"
            >
              ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            </button>
            <button
              onClick={() => navigate('/')}
              className="bg-gray-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-gray-700 transition-colors"
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-6 max-w-2xl relative">
      {/* Notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Achievement ‡πÉ‡∏´‡∏°‡πà */}
      {newlyUnlockedAchievement && (
        <AchievementNotification 
          achievement={newlyUnlockedAchievement} 
          onClose={closeAchievementNotification} 
        />
      )}
      
      <PlayerStats playerName={playerName} xp={stats.xp} items={stats.items} unlockedAchievements={unlockedAchievements} />

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          <strong>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: </strong> {error}
        </div>
      )}

      <div className="bg-white rounded-xl shadow-lg p-5 sm:p-6 mb-6 transition-all duration-300">
        <StoryDisplay storyText={storyData.text} items={stats.items} />

        <ChoiceButtons
          choices={storyData.choices}
          onChoose={handleChoice}
          loading={loading}
          requirementNotMet={storyData.requirementNotMet}
        />
      </div>

      {loading && (
        <div className="text-center py-4">
          <div className="text-2xl mb-2">‚è≥</div>
          <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á...</p>
        </div>
      )}
    </div>
  );
};

export default Game;