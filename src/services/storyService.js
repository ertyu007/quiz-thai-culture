// src/services/storyService.js
import storyData from '../data/thaiGameStory.json';

const DEFAULT_OPENING_STORY = {
  text: "‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏£‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà‡πÉ‡∏ô‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå {playerName} ‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏Å‡∏±‡∏ö‡∏à‡∏≤‡∏£‡∏∂‡∏Å‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡πà‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î...",
  choices: [
    { id: 'path_suvarnabhumi', text: "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏ô‡πâ‡∏≥ - ‡∏™‡∏π‡πà‡∏¢‡∏∏‡∏Ñ‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì‡∏†‡∏π‡∏°‡∏¥", nextScene: "suvarnabhumi_river" },
    { id: 'path_sukhothai', text: "‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏®‡∏¥‡∏•‡∏≤‡πÅ‡∏•‡∏á - ‡∏™‡∏π‡πà‡∏¢‡∏∏‡∏Ñ‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", nextScene: "sukhothai_gateway" },
    { id: 'path_ayutthaya', text: "‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏û‡∏¥‡∏ò‡∏µ - ‡∏™‡∏π‡πà‡∏¢‡∏∏‡∏Ñ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", nextScene: "ayutthaya_riverbank" }
  ],
  context: { scene: "time_portal_arrival", era: "beginning", playerName: "{playerName}" }
};

export const determineEnding = (endingKey) => {
  const endingDetails = storyData.endings[endingKey];
  if (endingDetails) {
    return endingDetails;
  }
  console.warn(`[StoryService] Ending key '${endingKey}' not found in JSON. Using default.`);
  return storyData.endings.modern_business || {
    type: "neutral",
    title: "‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°",
    text: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ö‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ"
  };
};

export const initializeStory = async (playerName) => {
  try {
    console.log(`[StoryService] Initializing story for player: ${playerName} (from JSON)`);
    
    // ‡πÉ‡∏ä‡πâ scene ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å JSON ‡πÉ‡∏´‡∏°‡πà
    const startSceneKey = "time_portal_arrival";
    let startScene = storyData.scenes[startSceneKey];

    if (!startScene) {
      console.warn(`[StoryService] Start scene '${startSceneKey}' not found, using default`);
      return {
        ...DEFAULT_OPENING_STORY,
        text: DEFAULT_OPENING_STORY.text.replace(/{playerName}/g, playerName),
        context: { ...DEFAULT_OPENING_STORY.context, playerName }
      };
    }

    const storyText = startScene.text.replace(/{playerName}/g, playerName);
    console.log('[StoryService] Successfully loaded initial story from JSON');
    return {
      text: storyText,
      choices: startScene.choices,
      context: { ...startScene.context, playerName: playerName }
    };

  } catch (error) {
    console.error('[StoryService] Error in initializeStory (JSON):', error);
    return {
      ...DEFAULT_OPENING_STORY,
      text: DEFAULT_OPENING_STORY.text.replace(/{playerName}/g, playerName),
      context: { ...DEFAULT_OPENING_STORY.context, playerName }
    };
  }
};

export const prepareAdaptiveStory = (isEnabled, playerStats) => {
  console.log(`[StoryService] Adaptive Story is ${isEnabled ? 'enabled' : 'disabled'} (not implemented in JSON version)`);
  console.log(`[StoryService] Player Stats for Adaptation:`, playerStats);
  return isEnabled;
};

export const makeChoice = async (choiceId, currentContext, stats = {}, humorMode = false, adaptiveStory = true) => {
  try {
    console.log(`[StoryService] Making choice: ${choiceId} (from JSON)`);
    const currentPlayerName = currentContext.playerName;
    const currentSceneKey = currentContext.scene;

    if (!currentSceneKey) {
      throw new Error('Current scene key is missing in context.');
    }

    const currentScene = storyData.scenes[currentSceneKey];
    if (!currentScene) {
      throw new Error(`Current scene '${currentSceneKey}' not found in JSON data.`);
    }

    const selectedChoice = currentScene.choices.find(choice => choice.id === choiceId);
    if (!selectedChoice) {
      console.warn(`[StoryService] Choice '${choiceId}' not found in scene '${currentSceneKey}'.`);
      return {
        story: {
          text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î... ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ",
          choices: [
            { id: 'continue_anyway', text: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠", nextScene: "time_portal_arrival" }
          ],
          context: currentContext
        },
        stats: { xp: 0, items: [] },
        gameEnded: false
      };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ stats ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤)
    const reqItems = selectedChoice.requiredItems || [];
    const reqXp = selectedChoice.requiredXp || 0;
    const playerItems = stats.items || [];
    const playerXp = stats.xp || 0;
    const hasRequiredItems = reqItems.every(item => playerItems.includes(item));
    if (!hasRequiredItems || playerXp < reqXp) {
      console.warn(`[StoryService] Player does not meet requirements for choice '${choiceId}'.`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á requirement ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
      let requirementMessage = "\n\nüìã ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:";
      if (!hasRequiredItems && reqItems.length > 0) {
        requirementMessage += `\n‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡∏°: ${reqItems.join(', ')}`;
      }
      if (playerXp < reqXp) {
        requirementMessage += `\n‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ XP: ${reqXp} (‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ: ${playerXp})`;
      }
      requirementMessage += "\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ô‡∏µ‡πâ";
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©
      const enhancedChoices = [
        ...currentScene.choices,
        { id: 'go_back_to_choices', text: "‚Ü©Ô∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà" },
        { id: 'proceed_anyway', text: "‚è≠Ô∏è ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠ (‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î)" }
      ];
      
      return {
        story: {
          text: currentScene.text.replace('{playerName}', currentPlayerName) + requirementMessage,
          choices: enhancedChoices,
          context: { 
            ...currentContext, 
            requirementFailed: true,
            previousChoice: choiceId,
            lastChoiceText: selectedChoice.text 
          }
        },
        stats: { xp: 0, items: [] },
        gameEnded: false,
        requirementNotMet: true
      };
    }

    const nextSceneKey = selectedChoice.nextScene;

    if (!nextSceneKey) {
      console.warn(`[StoryService] Next scene key is null/undefined for choice '${choiceId}'. Ending game.`);
      return createEndingResult(selectedChoice, currentContext);
    }

    const nextSceneData = storyData.scenes[nextSceneKey];

    if (!nextSceneData) {
      console.warn(`[StoryService] Next scene '${nextSceneKey}' not found in JSON. Ending game.`);
      return createEndingResult(selectedChoice, currentContext);
    }

    const nextStoryText = nextSceneData.text.replace('{playerName}', currentPlayerName);

    const isEndingScene = nextSceneData.context?.isEnding;
    let gameEnded = false;
    let endingKey = null;

    if (isEndingScene) {
      gameEnded = true;
      endingKey = nextSceneData.context.endingKey;
      console.log(`[StoryService] Game ending triggered. Key: ${endingKey}`);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Mini-game Scene
    if (nextSceneData.context?.miniGameType) {
      console.log(`[StoryService] Mini-game scene detected: ${nextSceneData.context.miniGameType}`);
      return {
        story: {
          text: nextStoryText,
          choices: [],
          context: { ...nextSceneData.context, playerName: currentPlayerName, previousChoice: choiceId }
        },
        stats: selectedChoice.stats || { xp: 0, items: [] },
        gameEnded: gameEnded,
        endingKey: endingKey,
        isMiniGame: true,
        miniGameType: nextSceneData.context.miniGameType
      };
    }

    console.log('[StoryService] Successfully processed choice from JSON');
    return {
      story: {
        text: nextStoryText,
        choices: nextSceneData.choices,
        context: { ...nextSceneData.context, playerName: currentPlayerName, previousChoice: choiceId }
      },
      stats: selectedChoice.stats || { xp: 0, items: [] },
      gameEnded: gameEnded,
      endingKey: endingKey
    };

  } catch (error) {
    console.error('[StoryService] Error in makeChoice (JSON):', error);
    return {
      story: {
        text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á... ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ",
        choices: [
          { id: 'continue_anyway', text: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠", nextScene: "time_portal_arrival" }
        ],
        context: currentContext
      },
      stats: { xp: 0, items: [] },
      gameEnded: false
    };
  }
};

const createEndingResult = (selectedChoice, currentContext) => {
  // ‡πÉ‡∏ä‡πâ ending ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å JSON ‡πÉ‡∏´‡∏°‡πà
  const endingKey = 'modern_business';

  return {
    story: {
      text: "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÑ‡∏õ... ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡∏à‡∏ö‡∏•‡∏á",
      choices: [],
      context: { ...currentContext, previousChoice: selectedChoice.id }
    },
    stats: selectedChoice.stats || { xp: 0, items: [] },
    gameEnded: true,
    endingKey: endingKey
  };
};

export const prepareHumorMode = (isEnabled) => {
  console.log(`[StoryService] Humor Mode is ${isEnabled ? 'enabled' : 'disabled'}`);
  return isEnabled;
};